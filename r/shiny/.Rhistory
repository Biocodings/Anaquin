source('~/Sources/QF/r/R/asian.R')
library(SmallQuant)
AsianLevyApprox
install.packages("Testthat")
install.packages("testthat")
AsianLevyApprox(type=-1, spot=6.80, strike=6.90, aver=6.80, risk=0.07, div=0.09, vol=0.14, T=0.50, T2=0.50)
r <- AsianLevyApprox(type=-1, spot=6.80, strike=6.90, aver=6.80, risk=0.07, div=0.09, vol=0.14, T=0.50, T2=0.50)
class(r)
list(r)
r[[1]]
source('~/Sources/QF/r/tests/asian.R')
AsianLevyApprox(type=-1, spot=6.80, strike=6.90, aver=6.80, risk=0.07, div=0.09, vol=0.14, T=0.50, T2=0.50)
AsianLevyApprox(type=1, spot=6.80, strike=6.90, aver=6.80, risk=0.07, div=0.09, vol=0.14, T=0.50, T2=0.50)
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
AsianLevyApprox(type=-1, spot=6.80, strike=6.90, aver=6.80, risk=0.07, div=0.09, vol=0.14, T=0.50, T2=0.50)
options(digits=9)
AsianLevyApprox(type=-1, spot=6.80, strike=6.90, aver=6.80, risk=0.07, div=0.09, vol=0.14, T=0.50, T2=0.50)
source('~/Sources/QF/r/tests/asian.R')
AsianLevyApprox(type=1, spot=6.80, strike=6.90, aver=6.80, risk=0.07, div=0.09, vol=0.14, T=0.50, T2=0.50)
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
library(SmallQuant)
AsianOption("geometric", "call", 80.0, 85.0, -0.03, 0.05, 0.25, 0.20)
library(RQuantLib)
AsianOption("geometric", "call", 80.0, 85.0, -0.03, 0.05, 0.25, 0.20)
AsianOption("geometric", "put", 80.0, 85.0, -0.03, 0.05, 0.25, 0.20)
AsianContinuousGeometricAverage(1, 80.0, 85.0, 0.05, -0.03, 0.20, 0.25)
library(SmallQuant)
source('~/Sources/QF/r/tests/asian.R')
source('~/Sources/QF/r/tests/asian.R')
AsianContinuousGeometricAverage(1, 80.0, 85.0, 0.05, -0.03, 0.20, 0.25)
library(rQuantLib)
library(RQuantLib)
AsianOption("geometric", "call", 80.0, 85.0, -0.03, 0.05, 0.25, 0.20)
AsianContinuousGeometricAverage(1, 80.0, 85.0, 0.05, -0.03, 0.20, 0.25)
AsianContinuousGeometricAverage(-1, 80.0, 85.0, 0.05, -0.03, 0.20, 0.25)
AsianContinuousGeometricAverage(1, 80.0, 85.0, 0.05, -0.03, 0.20, 0.25)
AsianContinuousGeometricAverage(1, 80.0, 85.0, 0.05, -0.03, 0.20, 0.25)
source('~/Sources/QF/r/tests/asian.R')
library(SmallQuant)
AsianContinuousGeometricAverage(1, 80.0, 85.0, 0.05, -0.03, 0.20, 0.25)
library(fOptions)
install.packages("fExoticOptions")
library(fE)
library(fExoticOptions)
GeometricAverageRateOption('c', 80, 85, 0.25, 0.05, 0.08, 0.20)
GeometricAverageRateOption('c', 80, 85, 0.25, 0.05, 0.08, 0.20)
library(fOptions)
GBSOption('c', 21.7017, 90.1939, 9.90562, 0.37587, 0.37587, 0.000304603)
GBSOption('c', 21.7017, 90.1939, 9.90562, 0.37587, 0.37587, 0.000304603)
GBSGreeks('rho, c', 21.7017, 90.1939, 9.90562, 0.37587, 0.37587, 0.000304603)
GBSGreeks('Delta, c', 21.7017, 90.1939, 9.90562, 0.37587, 0.37587, 0.000304603)
GBSGreeks('delta, c', 21.7017, 90.1939, 9.90562, 0.37587, 0.37587, 0.000304603)
GBSGreeks(Selection = "delta", TypeFlag = "c", S = 105, X = 100,Time = 1/2, r = 0.10, b = 0, sigma = 0.36)
GBSGreeks(Selection = "delta", TypeFlag = "c", S = 21.7017, X = 90.1939, Time = 9.90562, r = 0.37587, b = 0.37587, sigma = 0.000304603)
GBSGreeks(Selection = "rho", TypeFlag = "c", S = 21.7017, X = 90.1939, Time = 9.90562, r = 0.37587, b = 0.37587, sigma = 0.000304603)
source('~/Sources/QF/tests/generate.R')
library(RQuantLib)
source('~/Sources/QF/tests/generate.R')
library(fOptions)
BlackScholes
source('~/Sources/QF/tests/generate.R')
getwd()
library(SmallQuant)
library(SmallQuant)
BarrierOptionKnockIn
## One-sample test.
## Hollander & Wolfe (1973), 29f.
## Hamilton depression scale factor measurements in 9 patients with
##  mixed anxiety and depression, taken at the first (x) and second
##  (y) visit after initiation of a therapy (administration of a
##  tranquilizer).
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)
wilcox.test(y - x, alternative = "less")
debug(wilcox.test)
wilcox.test(y - x, alternative = "less")
x
0.878 - 1.83
mu
a <- n
psignrank
debug(psignrank)
psignrank
psignrank(10, 10)
psignrank
library(fExoticOptions)
source('~/Sources/QF/scripts/multi.R')
EuropeanExchangeOption(S1 = 101,
S2 = 104,
Q1 = 1,
Q2 = 1,
Time = 0.5,
r = 0.1,
b1 = 0.02,
b2 = 0.04,
sigma1 = 0.18,
sigma2 = 0.12,
rho = 0.8)
EuropeanExchangeOption
source('~/Sources/QF/scripts/multi.R')
EuropeanExchangeOption(S1 = 101,
S2 = 104,
Q1 = 1,
Q2 = 1,
Time = 0.5,
r = 0.1,
b1 = 0.02,
b2 = 0.04,
sigma1 = 0.18,
sigma2 = 0.12,
rho = 0.8)
source('~/Sources/QF/tests/generate.R')
debugSource('~/Sources/QF/tests/generate.R')
p
attributes(p)
p$price
p
attributes(p)
p$title
p.price
p.price
p
p
attributes(p)
p$class
p$title
attr(p, 'title')
attr(p, 'price')
debugSource('~/Sources/QF/tests/generate.R')
attr(p, 'price')c
debugSource('~/Sources/QF/tests/generate.R')
s1
s2
q1
q2
t
r
b1
b2
s1
s2
p
string(s1)
string(s2)
string(k)
string(r)
string(q1)
string(q2)
string(t)
string(v)
string(p)
debugSource('~/Sources/QF/tests/generate.R')
source('~/Sources/QF/tests/generate.R')
EuropeanExchangeOption
getwd()
dsignrank
dsignrank(20)
dsignrank(20, n=10)
dsignrank(20, n=30)
dsignrank(20, n=20)
for(n in c(4:5,10,40)) {
x <- seq(0, n*(n+1)/2, length = 501)
plot(x, dsignrank(x, n = n), type = "l",
main = paste0("dsignrank(x, n = ", n, ")"))
}
require(graphics)
par(mfrow = c(2,2))
for(n in c(4:5,10,40)) {
x <- seq(0, n*(n+1)/2, length = 501)
plot(x, dsignrank(x, n = n), type = "l",
main = paste0("dsignrank(x, n = ", n, ")"))
}
for(n in c(4:5,10,40)) {
x <- seq(0, n*(n+1)/2, length = 501)
plot(x, dsignrank(x, n = n), type = "l",
main = paste0("dsignrank(x, n = ", n, ")"))
}
for(n in c(4:5,10,40)) {
x <- seq(0, n*(n+1)/2, length = 501)
plot(x, dsignrank(x, n = n), type = "l",
main = paste0("dsignrank(x, n = ", n, ")"))
}
dsignrank(2000, n=4)
dsignrank(4, n=4)
dsignrank(10, n=4)
dsignrank(5, n=4)
dsignrank(5, n=4)
dsignrank(10, n=20)
dsignrank(40, n=20)
dsignrank(80, n=20)
dsignrank(100, n=20)
dsignrank(400, n=40)
source('~/Sources/SS/tests/generate.R')
getwd()
setwd('/Users/tedwong/Sources/SS/tests')
source('~/Sources/SS/tests/generate.R')
debugSource('~/Sources/SS/tests/generate.R')
debugSource('~/Sources/SS/tests/generate.R')
dsignrank(63, 55)
source('~/Sources/SS/tests/generate.R')
psignrank
psignrank(20, 20)
psignrank(50, 20)
psignrank(100, 20)
psignrank(100, 20)
psignrank(100, 20)
psignrank()
psignrank
psignrank(100, 20)
psignrank(80, 20)
psignrank
source('~/Sources/SS/tests/generate.R')
source('~/Sources/SS/tests/generate.R')
source('~/Sources/SS/tests/generate.R')
source('~/Sources/SS/tests/generate.R')
psignrank
source('~/Sources/SS/tests/generate.R')
source('~/Sources/SS/tests/generate.R')
psignrank(6, 68)
psignrank(68, 6)
1 - 0.661377
psignrank(12, 33, FALSE)
psignrank(3, 12, FALSE)
psignrank(33, 12, FALSE)
qsignrank
source('~/Sources/SS/tests/generate.R')
debugSource('~/Sources/SS/tests/generate.R')
d <- qsignrank(x, n=n, lower.tail = l <= 0.5)
debugSource('~/Sources/SS/tests/generate.R')
a ,_ b
a <- b
a <- n
a
x
qsignrank(x, n=n, lower.tail = l <= 0.5)
qsignrank(18, n=n, lower.tail = l <= 0.5)
a
x
qsignrank(7, n=n, lower.tail = l <= 0.5)
qsignrank(0.5, n=n, lower.tail = l <= 0.5)
source('~/Sources/SS/tests/generate.R')
source('~/Sources/SS/tests/generate.R')
source('~/Sources/SS/tests/generate.R')
psignrank(0, 12)
psignrank(0, 12)
psignrank(9, 87)
psignrank(87, 9)
psignrank(87, 9, FALSE)
psignrank(68, 6)
psignrank(68, 6)
psignrank(9, 87, 0)
psignrank(87, 9, 0)
psignrank(87, 9, 0)
setwd('/Users/tedwong/Sources/QA')
source('/var/folders/fx/8v_9jxd54z99ttzq2588vnnw0000gn/T/r2pdf.R')
/tmp/r2pdf.R
source('/tmp/r2pdf.R')
source('~/Sources/QA/output/VarKAllele_alleleAllele.R')
library(SmallQuant)
shiny::runApp('R')
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
Rcpp::sourceCpp('src/asian.cpp')
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
Rcpp::sourceCpp('src/asian.cpp')
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
library(SmallQuant)
runApp('R')
shiny::runApp('R')
library(SmallQuant)
